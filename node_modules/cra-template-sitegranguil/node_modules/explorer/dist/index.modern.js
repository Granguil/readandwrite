import React, { useState, useEffect } from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var explorerType = {
  explorer: 0,
  questionnary: 1
};
var generalByDefault = {
  loadAll: true,
  cardNumber: 4,
  displayAllCard: false
};
var explorerDefault = {
  infoNextCard: true,
  infoPopUp: false,
  creation: false,
  update: false,
  "delete": false
};
var questionnaryDefault = {
  statCard: false,
  addCard: false,
  displayResponse: true,
  displayNumberQuestion: true
};
var displayByDefault = {
  colorTitle: {
    Current: {
      color: 'darkred'
    },
    NotRead: {
      color: 'black'
    },
    Finished: {
      color: 'darkgreen',
      backgroundColor: 'lightgreen'
    }
  },
  titles: ['Universe', 'Book', 'Chapter', 'Scene']
};
var contentByDefault = [];
var displayContentByDefault = [];
var functions = {
  loadAll: function loadAll(data, test) {
    configByDefault.content = data.Elements;
    configByDefault.displayContent = data.Blocks;
    test();
  },
  loadBookMark: function loadBookMark(data, setter) {
    setter(data);
  },
  loadContentById: function loadContentById() {},
  loadBlockById: function loadBlockById() {},
  createContent: function createContent() {},
  createBlock: function createBlock() {},
  updateContent: function updateContent() {},
  updateBlock: function updateBlock() {},
  deleteContent: function deleteContent() {},
  deleteBlock: function deleteBlock() {}
};
var configByDefault = {
  type: explorerType.explorer,
  general: generalByDefault,
  explorer: explorerDefault,
  questionnary: {},
  content: contentByDefault,
  displayContent: displayContentByDefault,
  displayByDefault: displayByDefault,
  functions: functions
};

var Style = {"article":"_3sd28","articleBlock":"_13pz-","av":"_11MAs","imageContainer":"_2CQJq","img":"_NbNr_","enveloppe":"_3K3gR","containerBorder":"_12rFC","projets":"_91LaW","containerForm":"_9ynbc","centerForm":"_16FnH","displayCards":"_3Zp3u","w100":"_24-1c","info":"_37KEu","displayinfo":"_38-EE","cardFooter":"_lJm2s","buttonFooter":"_1RrwG","editBM":"_1oG5V"};

function NavCard(_ref) {
  var niveau = _ref.niveau,
      content = _ref.content,
      display = _ref.display,
      navigation = _ref.navigation,
      title = _ref.title,
      idSelected = _ref.idSelected;
  console.log(content);
  return /*#__PURE__*/React.createElement("div", {
    className: Style.article
  }, /*#__PURE__*/React.createElement("div", {
    className: Style.w100
  }, /*#__PURE__*/React.createElement("h3", null, title), /*#__PURE__*/React.createElement("div", {
    className: Style.enveloppe
  }, content.sort(function (a, b) {
    return a.numero - b.numero;
  }).map(function (c, index) {
    return /*#__PURE__*/React.createElement("button", {
      key: index,
      style: _extends({}, display.colorTitle[c.status], {
        border: Object.values(idSelected).includes(c.id) ? '4px solid darkgray' : 'none'
      }),
      className: Style.displayinfo,
      onClick: function onClick() {
        navigation(niveau, c.id);
      }
    }, c.title);
  }))));
}

function BlockCard(_ref) {
  var blocks = _ref.blocks,
      bookMark = _ref.bookMark,
      setBookMark = _ref.setBookMark,
      createBookMark = _ref.createBookMark,
      bookMarkList = _ref.bookMarkList,
      updateBookMark = _ref.updateBookMark,
      ButtonsList = _ref.ButtonsList,
      readValidated = _ref.readValidated;

  var _useState = useState(''),
      title = _useState[0],
      seTitle = _useState[1];

  var _useState2 = useState(''),
      idBm = _useState2[0],
      setIdBm = _useState2[1];

  return /*#__PURE__*/React.createElement("div", {
    id: Style.articleBlock
  }, /*#__PURE__*/React.createElement("div", {
    className: Style.w100
  }, /*#__PURE__*/React.createElement("div", {
    className: Style.enveloppe
  }, blocks.sort(function (a, b) {
    return a.order - b.order;
  }).map(function (b, index) {
    return /*#__PURE__*/React.createElement("div", {
      key: index,
      style: {
        padding: b.text.substring(0, 3).indexOf('-') !== -1 ? '3px 10px 2px 20px' : '3px 10px 2px 5px'
      }
    }, b.text);
  }), /*#__PURE__*/React.createElement("div", {
    className: Style.cardFooter
  }, /*#__PURE__*/React.createElement("div", {
    className: Style.buttonFooter
  }, /*#__PURE__*/React.createElement("input", {
    type: "text",
    onInput: function onInput(e) {
      var bm = _extends({}, bookMark);

      bm.title = e.target.value;
      setBookMark(_extends({}, bm));
    },
    placeholder: 'Name of New BookMark'
  }), ButtonsList.createBM('Create Bookmark', function () {
    return bookMark.title != '' ? createBookMark() : alert('Entrez un nom');
  })), /*#__PURE__*/React.createElement("div", {
    className: Style.buttonFooter
  }, bookMarkList.length > 0 ? /*#__PURE__*/React.createElement("div", {
    className: Style.editBM
  }, /*#__PURE__*/React.createElement("select", {
    onChange: function onChange(e) {
      setIdBm(e.target.value);
      var t = bookMarkList.filter(function (x) {
        return x.id === e.target.value;
      })[0].title;
      seTitle(t);
    }
  }, bookMarkList.map(function (bm, index) {
    return /*#__PURE__*/React.createElement("option", {
      key: index,
      value: bm.id
    }, bm.title);
  })), ButtonsList.updateBM('Update BookMark', function () {
    return updateBookMark(idBm, title);
  })) : null), /*#__PURE__*/React.createElement("div", {
    className: Style.buttonFooter
  }, ButtonsList.readValidated('Mark as Read', function () {
    return readValidated();
  }))))));
}

function BookMarkCard(_ref) {
  var bookMarks = _ref.bookMarks,
      bookMarkNavigation = _ref.bookMarkNavigation,
      deleteBookMark = _ref.deleteBookMark,
      ButtonsList = _ref.ButtonsList;
  console.log(bookMarks);
  return /*#__PURE__*/React.createElement("div", {
    className: Style.article
  }, /*#__PURE__*/React.createElement("div", {
    className: Style.w100
  }, /*#__PURE__*/React.createElement("h3", null, "BookMark"), /*#__PURE__*/React.createElement("div", {
    className: Style.enveloppe
  }, bookMarks.map(function (bm, index) {
    return /*#__PURE__*/React.createElement("div", {
      key: index,
      className: Style.displayinfo
    }, /*#__PURE__*/React.createElement("button", {
      onClick: function onClick() {
        console.log(bm.universe + ' : ' + bm.book + ' : ' + bm.chapter + ' : ' + bm.scene);
        bookMarkNavigation(bm.universe, bm.book, bm.chapter, bm.scene);
      }
    }, bm.title), ButtonsList.deleteBM('Delete', function () {
      return deleteBookMark(bm.id);
    }));
  }))));
}

function ExplorerDisplay(_ref) {
  var loadFunction = _ref.loadFunction,
      userId = _ref.userId,
      createBookMarkData = _ref.createBookMarkData,
      loadBookMark = _ref.loadBookMark,
      _deleteBookMark = _ref.deleteBookMark,
      buttonsList = _ref.buttonsList,
      readValidated = _ref.readValidated;

  var _useState = useState(configByDefault.general.displayAllCard ? new Array(configByDefault.general.cardNumber) : new Array(1)),
      Content = _useState[0],
      setContent = _useState[1];

  var _useState2 = useState([]),
      Block = _useState2[0],
      setBlock = _useState2[1];

  var _useState3 = useState(false),
      load = _useState3[0],
      setLoader = _useState3[1];

  var _useState4 = useState({
    universe: '',
    book: '',
    chapter: '',
    scene: '',
    user: userId,
    title: ''
  }),
      bookMark = _useState4[0],
      setBookMark = _useState4[1];

  var _useState5 = useState([]),
      BookMarkList = _useState5[0],
      setBookMarkList = _useState5[1];

  useEffect(function () {
    var test = function test() {
      if (configByDefault.general.displayAllCard) {
        var c = [].concat(Content);

        for (var i = 0; i < configByDefault.general.cardNumber; i++) {
          c[i] = [];
        }

        setContent([].concat(c));
      }

      _navigation(-1, null);

      setLoader(true);
    };

    var getData = function getData() {
      try {
        var _temp3 = function _temp3() {
          return Promise.resolve(loadBookMark(function (data) {
            console.log('Data BookMark');
            console.log(data);
            setBookMarkList(data.bookmarks);
          })).then(function () {});
        };

        var _temp4 = function () {
          if (configByDefault.general.loadAll) {
            return Promise.resolve(loadFunction(function (data) {
              return configByDefault.functions.loadAll(data, function () {
                return test();
              });
            })).then(function () {});
          }
        }();

        return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));
      } catch (e) {
        return Promise.reject(e);
      }
    };

    getData();
  }, []);

  var _navigation = function navigation(niveau, id) {
    console.log(niveau + ' : ' + id);

    var bm = _extends({}, bookMark);

    switch (niveau) {
      case 0:
        bm.universe = id;
        break;

      case 1:
        bm.book = id;
        break;

      case 2:
        bm.chapter = id;
        break;

      case 3:
        bm.scene = id;
        break;

      case -1:
        break;

      default:
        console.error('Error to BookMark Generation !');
    }

    setBookMark(_extends({}, bm));
    var c = [].concat(Content);

    if (configByDefault.general.displayAllCard) {
      for (var i = c.length; i > niveau + 1; i--) {
        c[i - 1] = [];
      }

      if (niveau + 1 < configByDefault.general.cardNumber) {
        c[niveau + 1] = configByDefault.content.filter(function (x) {
          return x.parent === id;
        });
        setBlock([]);
      } else {
        setBlock([].concat(configByDefault.displayContent.filter(function (x) {
          return x.parent === id;
        })));
      }
    } else {
      if (niveau + 1 < configByDefault.general.cardNumber) {
        for (var _i = c.length; _i > niveau + 1; _i--) {
          console.log('pop');
          c.pop();
        }

        c.push(configByDefault.content.filter(function (x) {
          return x.parent === id;
        }));
        console.log('Loading Cards');
        console.log(c);
        setBlock([]);
      } else {
        setBlock([].concat(configByDefault.displayContent.filter(function (x) {
          return x.parent === id;
        })));
      }
    }

    console.log(c);
    setContent([].concat(c));
  };

  var _createBookMark = function createBookMark() {
    createBookMarkData(bookMark);
  };

  var _updateBookMark = function updateBookMark(id, title) {
    createBookMarkData(_extends({}, bookMark, {
      id: id,
      title: title
    }));
  };

  var readValidatedScene = function readValidatedScene() {
    readValidated(bookMark);
  };

  if (load) {
    console.log(Content);
  }

  var bmNavigation = function bmNavigation(u, b, c, s) {
    alert(u);
    NavigationWithBookMark(u, b, c, s);
  };

  var NavigationWithBookMark = function NavigationWithBookMark(u, b, ch, s) {
    var bm = _extends({}, bookMark);

    var c = [].concat(Content);

    var _loop = function _loop(niveau) {
      var id = '';

      switch (niveau) {
        case 0:
          bm.universe = u;
          id = u;
          break;

        case 1:
          bm.book = b;
          id = b;
          break;

        case 2:
          bm.chapter = ch;
          id = ch;
          break;

        case 3:
          bm.scene = s;
          id = s;
          break;

        case -1:
          break;

        default:
          console.error('Error to BookMark Generation !');
      }

      if (configByDefault.general.displayAllCard) {
        for (var i = c.length; i > niveau + 1; i--) {
          c[i - 1] = [];
        }

        if (niveau + 1 < configByDefault.general.cardNumber) {
          c[niveau + 1] = configByDefault.content.filter(function (x) {
            return x.parent === id;
          });
          setBlock([]);
        } else {
          setBlock([].concat(configByDefault.displayContent.filter(function (x) {
            return x.parent === id;
          })));
        }
      } else {
        if (niveau + 1 < configByDefault.general.cardNumber) {
          for (var _i2 = c.length; _i2 > niveau + 1; _i2--) {
            console.log('pop');
            c.pop();
          }

          c.push(configByDefault.content.filter(function (x) {
            return x.parent === id;
          }));
          console.log('Loading Cards');
          console.log(c);
          setBlock([]);
        } else {
          setBlock([].concat(configByDefault.displayContent.filter(function (x) {
            return x.parent === id;
          })));
        }
      }
    };

    for (var niveau = 0; niveau <= configByDefault.general.cardNumber - 1; niveau++) {
      _loop(niveau);
    }

    console.log(c);
    setBookMark(_extends({}, bm));
    setContent([].concat(c));
  };

  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
    className: Style.displayCards
  }, /*#__PURE__*/React.createElement(BookMarkCard, {
    bookMarks: BookMarkList,
    bookMarkNavigation: function bookMarkNavigation(u, b, c, s) {
      return bmNavigation(u, b, c, s);
    },
    deleteBookMark: function deleteBookMark(id) {
      _deleteBookMark(id);

      var b = [].concat(BookMarkList);
      b = b.filter(function (x) {
        return x.id != id;
      });
      setBookMarkList([].concat(b));
    },
    ButtonsList: buttonsList
  }), load ? Content.map(function (c, index) {
    console.log(index);
    console.log(Content[index]);
    return /*#__PURE__*/React.createElement(NavCard, {
      key: index,
      niveau: index,
      content: Content[index],
      general: configByDefault.general,
      specificity: configByDefault.type = explorerType.explorer ? configByDefault.explorer : configByDefault.questionnary,
      display: configByDefault.displayByDefault,
      navigation: function navigation(niveau, id) {
        return _navigation(niveau, id);
      },
      title: configByDefault.displayByDefault.titles[index],
      idSelected: bookMark
    });
  }) : null), Block.length > 0 ? /*#__PURE__*/React.createElement("div", {
    className: Style.displayCards
  }, /*#__PURE__*/React.createElement(BlockCard, {
    blocks: Block,
    setBookMark: setBookMark,
    createBookMark: function createBookMark() {
      return _createBookMark();
    },
    updateBookMark: function updateBookMark(id, title) {
      return _updateBookMark(id, title);
    },
    bookMark: bookMark,
    bookMarkList: BookMarkList,
    ButtonsList: buttonsList,
    readValidated: function readValidated() {
      return readValidatedScene();
    }
  })) : null);
}

var Explorer = function Explorer(_ref) {
  var load = _ref.load,
      userId = _ref.userId,
      createBookMark = _ref.createBookMark,
      _loadBookMark = _ref.loadBookMark,
      _deleteBookMark = _ref.deleteBookMark,
      buttonsList = _ref.buttonsList,
      _readValidated = _ref.readValidated;
  return /*#__PURE__*/React.createElement(ExplorerDisplay, {
    loadFunction: function loadFunction(d) {
      return load(d);
    },
    userId: userId,
    createBookMarkData: createBookMark,
    loadBookMark: function loadBookMark(data) {
      return _loadBookMark(data);
    },
    deleteBookMark: function deleteBookMark(id) {
      return _deleteBookMark(id);
    },
    buttonsList: buttonsList,
    readValidated: function readValidated(data) {
      return _readValidated(data);
    }
  });
};
var typeExplorer = explorerType;
var defaultGeneral = generalByDefault;
var defaultExplorer = explorerDefault;
var defaultQuestionnary = questionnaryDefault;
var defaultFunctions = functions;
var defaultContent = contentByDefault;
var defaultDisplay = displayByDefault;
var defaultDisplayContent = displayContentByDefault;

export { Explorer, defaultContent, defaultDisplay, defaultDisplayContent, defaultExplorer, defaultFunctions, defaultGeneral, defaultQuestionnary, typeExplorer };
//# sourceMappingURL=index.modern.js.map
